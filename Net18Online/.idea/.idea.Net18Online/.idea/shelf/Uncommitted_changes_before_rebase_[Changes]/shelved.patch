Index: WebPortalEverthing/Controllers/EcologyController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Everything.Data;\nusing Everything.Data.Interface.Models;\nusing Everything.Data.Interface.Repositories;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing Everything.Data.Repositories;\nusing WebPortalEverthing.Models.Ecology;\nusing Everything.Data.Models;\nusing WebPortalEverthing.Services;\n\n\nnamespace WebPortalEverthing.Controllers\n{\n    \npublic class EcologyController : Controller\n{ \n    private IEcologyRepositoryReal _ecologyRepository;\n    private IUserRepositryReal _userRepositryReal;\n    private WebDbContext _webDbContext;\n    private ICommentRepositoryReal _commentRepositoryReal;\n    private AuthService _authService;\n\n    public EcologyController(IEcologyRepositoryReal ecologyRepository, \n        ICommentRepositoryReal commentRepositoryReal,\n        IUserRepositryReal userRepositryReal,\n        AuthService authService,\n        WebDbContext webDbContext)\n    {\n        _ecologyRepository = ecologyRepository;\n        _commentRepositoryReal = commentRepositoryReal;\n        _webDbContext = webDbContext;\n        _userRepositryReal = userRepositryReal;\n        _authService = authService;\n    }\n\n    public IActionResult Index()\n    {\n        var model = new EcologyViewModel();\n        return View(model);\n    }\n\n    [HttpGet]\n    public IActionResult EcologyChat()\n    {\n        var id = _authService.GetUserId();\n        if (id is null)\n        {\n            return RedirectToAction(\"Index\", \"Home\");\n        }\n\n        var user = _userRepositryReal.Get(id.Value);\n        if (user.Coins < 150)\n        {\n            return RedirectToAction(\"Index\");\n        }\n\n        var ecologyFromDb = _ecologyRepository.GetAll();\n\n        var ecologyViewModels = ecologyFromDb\n            .Select(dbEcology =>\n                new EcologyViewModel\n                {\n                    PostId = dbEcology.Id,\n                    ImageSrc = dbEcology.ImageSrc,\n                    Texts = dbEcology.Text\n                }\n            )\n            .ToList();\n        return View(ecologyViewModels);\n    }\n\n    [HttpPost]\n    public IActionResult EcologyChat(PostCreationViewModel viewModel)\n    {\n        if (CalcCountWorldRepeat.IsEclogyTextHas(viewModel.Text)>=4)\n        {\n            ModelState.AddModelError(\n                nameof(PostCreationViewModel.Text),\n                \"so similar texts\");\n        }\n\n        if (!ModelState.IsValid)\n        {\n            return View(viewModel);\n        }\n        \n        var ecology = new EcologyData\n        {\n            ImageSrc = viewModel.Url,\n            Text = viewModel.Text\n        };\n        _ecologyRepository.Add(ecology);\n            \n        return RedirectToAction(\"EcologyChat\");\n    }\n        \n    [HttpPost]\n    public IActionResult UpdatePost(int id, string url, string text)\n    {\n        _ecologyRepository.UpdatePost(id, url, text);\n        return RedirectToAction(\"EcologyChat\");\n    }\n\n    [HttpPost]\n    public IActionResult Remove(int id)\n    {\n        _ecologyRepository.Delete(id);\n        return RedirectToAction(\"EcologyChat\");\n    }\n    \n    /*[HttpPost]\n    public IActionResult AddComment(int postId, string commentTect, string userId)\n    {\n       //var userId\n        if (ModelState.IsValid && userId != null)\n        {\n            var comment = new CommentViewModel()\n            {\n                PostId = postId,\n                CommentText = commentText,\n                UserId = userId.Value\n            };\n            _commentRepositoryReal.Add(comment);\n            return RedirectToAction(\"EcologyChat\");\n        }\n        return BadRequest(\"Invalid comment data.\");\n    }\n\n    [HttpGet]\n    public async Task<IActionResult> CommentsForPost(int postId)\n    {\n        var comments = await _commentRepositoryReal.Comments\n            .Where(c => c.PostId == postId)\n            .Include(c => c.User)\n            .ToListAsync();\n        return View(comments as string);\n    }*/\n\n    [HttpPost]\n    public IActionResult AddComment(int postId, string commentText)\n    {\n        //var userId\n        if (!ModelState.IsValid) return BadRequest(\"Invalid comment data.\");\n        var comment = new CommentData()\n        {\n            PostId = postId, \n            CommentText = commentText\n        }; \n        _commentRepositoryReal.Add(comment); \n        return RedirectToAction(\"EcologyChat\");\n    }\n\n    [HttpGet]\n    public IActionResult CommentsForPost(int postId)\n    {\n        var comm = _commentRepositoryReal.GetCommentsByPostId(postId);\n        return View(comm);\n    }\n}\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebPortalEverthing/Controllers/EcologyController.cs b/WebPortalEverthing/Controllers/EcologyController.cs
--- a/WebPortalEverthing/Controllers/EcologyController.cs	(revision dd5fd616fafa7d153ff2cc3b8f154a23505e7671)
+++ b/WebPortalEverthing/Controllers/EcologyController.cs	(date 1731774061866)
@@ -81,7 +81,7 @@
 
         if (!ModelState.IsValid)
         {
-            return View(viewModel);
+            return View("EcologyChat");
         }
         
         var ecology = new EcologyData
